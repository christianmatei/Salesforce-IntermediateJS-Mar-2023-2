Magesh Kuppan

Schedule:
    Session-1   : 1:30 hrs
    Tea Break   : 20 mins
    Session-2   : 1:30 hour
    Lunch Break : 1 hour
    Session-3   : 1:30 hrs
    Tea Break   : 20 mins
    Session-4   : 1:30 hour

Methodology:
    - No powerpoints
    - 100% code driven
    - Repository : https://github.com/tkmagesh/Salesforce-IntermediateJS-Mar-2023-2

About You:
    - Name
    - Where are you from?
    - Experience in JS (frameworks? / libraries?)
    - Specific expectations?

Topics:
    1. Basics
    2. Unique aspects of JS (ES5)
    3. ES6 features
    4. JS Applied
    5. Tooling, Testing etc

Basics
    Usage
        Browser:
            In traditional web apps:
                Data validations and DOM manipulation
            In Single Page Applications:
                A complete UI layer
        Server:
            Server Drive Web Applications
            APIs

    Data Types
        number, string, boolean
        object, function, undefined

        typeof 


    Constructs
        var, if else, switch case default, for, for in, while, throw, try catch finally, function

    APIs
        Date, Array, Error, Math, timer (setTimeout, clearTimeout, setInterval, clearInterval), RegEx

    Unique Aspects
        - Loosely typed
            var x;
        - dynamic
            Object = collection of key/value paris (map / dictionary)
            attributes are accessed using '.' and '[]' notations
            Convention:
                Use the '.' when an existing attribute is updated
                Use the '[]' when a new attribute has to be added
        - functions
            - variadic functions
            - functions are objects
            - higher order functions
                * functions can be passed as arguments
                * functions can be retured as return values


Implicit values of a function
    - this
        invocation context

    - arguments
        Array like object with all the argument values passed to the function
        arguments.length => # of argument values
        arguments[0] => first argument value
        arguments[1] => second argument value
        ....

Function Invocation Patterns
    There are 6 ways to invoke a function in JS
    IT DOES NOT MATTER WHERE A FUNCTION OR WHO OWNS THE FUNCTION
        WHAT MATTERS IS, "HOW" THE FUNCTION IS INVOKED

    1. Invoked as a method of an object (obj)
        this => obj
    2. Invoked as a function
        this => global scope (window in the browser)
    3. Using the "call" method of the function
    4. Using the "apply" method of the function
    5. As an "Immediately Invoked Function Expression" (IIFE)
    6. Using the "new" keyword (Constructor Function)

    
Create a html page "click-tracker.html"
    with a button "Track"
    and a div

    The page tracks how many times the button clicked and update the count in the div


Pure Function
    A function is called as a pure function if the invocation of the function can be replaced with the result of the function without affecting the outcome!

    Will always return the same result for the given inputs
    
    That does not have any "side effects"

Constructor Functions
    Functions that behave like class
    There is not syntax difference between a normal function and a constructor function
    Invoked with the "new" keyword
        this => new object
        this => returned by default
    Convention : Constructor Function name starts with uppercase

Inheritence:
    Prototypal Inheritence
        One object acts as a base object for a family of objects

Functional Programming
    1. Immutability
    2. Avoid iteration (prefer recurssion)

    example APIs
        filter
            ex :
                var nos = [3,1,4,2,5]
                var evenNos = nos.filter(function(no){
                    return no % 2 === 0;
                })


        forEach
        find
        map
            ex:
                var doubleNos = nos.map(function(no){
                    return no * 2
                })
        reduce
            var nos = [3,1,6,2,5]
            var total = nos.reduce(function(prevResult, no){
                console.log('prevResult = ', prevResult, ' no = ', no)
                return prevResult + no
            })

            var total = nos.reduce(function(prevResult, no){
                console.log('prevResult = ', prevResult, ' no = ', no)
                return prevResult + no
            }, 0)
        some
        sort

Implement a Publisher-Subscriber using the following usecase
ShoppingCart
    -add(productName, UnitCost, Units)
    -items()
        return the list of products added with "ItemValue" (UnitCost * Units)
    -total()
        returns the Total ShoppingCart Value (Sum of itemValues)
    -events
        -maxLimitExceeded

Asynchronous Programming
    Asynchronous Operation
        - An operation that is initiated, will complete sometime in future and not waited for its completion
    Techniques
        - Callback
        - Promise
        - Async Await
        - Observables (rxjs)

HTML5 APIs
    WebWorker
        Thread like infrastructure
        to start a web server
            npx http-server -c -1
    WebSockets

Webpack
